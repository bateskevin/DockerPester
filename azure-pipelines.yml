# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

jobs:

  - job: BaseTests
    pool: 
      vmImage: windows-2019
    steps: 
      - task: PowerShell@2
        inputs:
          targetType: 'inline'
          script: |
            Install-Module DockerMsftProvider -Force
            Install-Package Docker -ProviderName DockerMsftProvider -Force
            (Install-WindowsFeature Containers).RestartNeeded
            Start-Service Docker
      - powershell: "./CI/Tests.AzureDevops.ps1"
        displayName: "Running Tests Windows 2019"
      - task: PublishTestResults@2
        condition: succeededOrFailed()
        inputs:
          testRunner: NUnit
          testResultsFiles: '**/TestsResults.xml'

  - job: servercore_1809
    pool: 
      vmImage: windows-2019
    steps:
      - task: PowerShell@2
        inputs:
          targetType: 'inline'
          script: |
            Install-Module DockerMsftProvider -Force
            Install-Package Docker -ProviderName DockerMsftProvider -Force
            (Install-WindowsFeature Containers).RestartNeeded
            Start-Service Docker
      - powershell: "./CI/Tests.AzureDevops.WIN.ps1"
        displayName: "Running Tests Windows 2016"
      - task: PublishTestResults@2
        condition: succeededOrFailed()
        inputs:
          testRunner: NUnit

  - job: servercore_2019
    pool: 
      vmImage: windows-2019
    steps:
      - task: PowerShell@2
        inputs:
          targetType: 'inline'
          script: |
            Install-Module DockerMsftProvider -Force
            Install-Package Docker -ProviderName DockerMsftProvider -Force
            (Install-WindowsFeature Containers).RestartNeeded
            Start-Service Docker
      - powershell: "./CI/Tests.AzureDevops.servercore.ps1"
        displayName: "Running Tests Windows servercore 2019"
      - task: PublishTestResults@2
        condition: succeededOrFailed()
        inputs:
          testRunner: NUnit
        

  - job: alpine_3_8
    pool: 
      vmImage: ubuntu-latest
    steps: 
      - script: sudo apt-get remove docker docker-engine docker.io containerd runc
      - script: "pwsh -c ./CI/Tests.AzureDevops.alpine-3.8.ps1"
        displayName: "Running Tests Ubuntu"
      - task: PublishTestResults@2
        condition: succeededOrFailed()
        inputs:
          testRunner: NUnit
          testResultsFiles: '**/TestsResults.xml'

  - job: ubuntu_ionic
    pool: 
      vmImage: ubuntu-latest
    steps: 
      - script: sudo apt-get remove docker docker-engine docker.io containerd runc
      - script: "pwsh -c ./CI/Tests.AzureDevops.ubuntu-bionic.ps1"
        displayName: "Running Tests Ubuntu"
      - task: PublishTestResults@2
        condition: succeededOrFailed()
        inputs:
          testRunner: NUnit
          testResultsFiles: '**/TestsResults.xml'      

  - job: alpine_3_10
    pool: 
      vmImage: ubuntu-latest
    steps: 
      - script: sudo apt-get remove docker docker-engine docker.io containerd runc
      - script: "pwsh -c ./CI/Tests.AzureDevops.alpine-3.10.ps1"
        displayName: "Running Tests Ubuntu"
      - task: PublishTestResults@2
        condition: succeededOrFailed()
        inputs:
          testRunner: NUnit
          testResultsFiles: '**/TestsResults.xml'